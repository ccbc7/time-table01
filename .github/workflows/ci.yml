name: Run rspec, rubocop and deploy

on:
  push:

jobs:
  rspec:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_USER: myuser
          MYSQL_PASSWORD: mypassword
          MYSQL_DATABASE: mydb
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
          bundler-cache: true

      - name: Bundle install
        run: bundle install
        working-directory: ./myapp

      - name: Yarn install
        run: yarn install --check-files
        working-directory: ./myapp

      - name: Database create and migrate
        run: |
          cp config/database.yml.ci config/database.yml
          bundle exec rails db:create RAILS_ENV=test
          bundle exec rails db:migrate RAILS_ENV=test
        working-directory: ./myapp

      - name: Run rspec
        run: bundle exec rspec
        working-directory: ./myapp

  rubocop:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
          bundler-cache: true

      - name: Bundle install
        run: bundle install
        working-directory: ./myapp

      - name: Run rubocop
        run: bundle exec rubocop
        working-directory: ./myapp

  deploy:
    runs-on: ubuntu-latest
    needs: [rspec, rubocop] # rspecとrubocopのジョブが成功した場合のみデプロイを行う
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1 # 適切なリージョンに置き換えてください

      - name: Install AWS Copilot
        run: |
          curl -Lo /usr/local/bin/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          chmod +x /usr/local/bin/copilot
          copilot --version

      - name: Deploy to ECS
        run: copilot svc deploy --name my-service --env test
        # servicenameとenvironmentnameは適切なものに置き換えてください
